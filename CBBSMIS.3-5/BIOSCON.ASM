;CBBS BIOS: MODEM/CONSOLE I/O O-N-L-Y.
;12/03/81 18:39:20
;
;Use this is a sample for modifying the Console I/O
;of your BIOS, to support the MODEM.
;
;
FALSE	EQU	0
TRUE	EQU	NOT FALSE
;
;CHOOSE YOUR MODEM ===>
;
HAYES	EQU	FALSE	;S-100, NOT "SMARTMODEM"
IDS	EQU	FALSE
PMMI	EQU	TRUE
;
MOTORON	EQU	TRUE	;<==== WANT MOTOR ON LOGIC?
;
;DEFINE SENSE SWITCH PORT AND BITS
;
SSW	EQU	3	;SENSE SWITCH (ON 3P+S)
;
REMOTE	EQU	80H	;SSW ON IF REMOTE
LCL	EQU	40H	;SSW ON IF LOCAL
RSREM	EQU	20H	;RANDY'S REMOTE SECOND CONSOLE
CTLPORT	EQU	SSW	;MOTOR CONTROL OUTPUT PORT
CTLMOTR	EQU	040H	;MOTOR START VALUE
;			ON 9600 BAUD SERIAL LINE
CR	EQU	0DH
LF	EQU	0AH
;
;JMP TABLE (PARTIAL)
;
	.
	.
	.
	JMP	CONST
	JMP	CONIN
	JMP	CONOUT
	.
;
;This is some representative logic for how we turn on
;the motors to the drive if we are operaing the CBBS
;computer locally.
;
BOOT	LXI	SP,80H	;SET STACK POINTER.
	XRA	A	;SET DISK NUMBER = 0.
	STA	DISKNO
	CALL	GOCPM	;SET UP LOW MEM POINTERS
;
;HEX 80 ON TO NOT AUTO-COMMAND
;
	IN	SSW
	ANI	REMOTE	;RUNNING CBBS?
	JNZ	CCP	;	YES, AUTO-LOAD
 IF MOTORON
	MVI	A,CTLMOTR
	OUT	CTLPORT
 ENDIF
	JMP	CCP+3	;	NO, NO AUTO-LOAD
;
GOCPM	MVI	A,0C3H	;PUT JMP TO WBOOT
	STA	0	;	AT 0
	LXI	H,WBOOTE
	SHLD	1
	STA	5
	LXI	H,BDOSE	;PUT JUMP TO BDOS
	SHLD	6	;AT ADR 5,6,7.
	LXI	H,80H	;SET DEFAULT DMA ADR.
	SHLD	DMAADD
;
;ZAP OUT WARM BOOT TO ANYTHING BUT A:
;
	MVI	C,0
	RET
;
;---->	WARM-BOOT: READ ALL OF CPM BACK IN
;EXCEPT BIOS, THEN JUMP TO CCP.
;
WBOOT	.
	.
	.
	CALL	GOCPM
	JMP	CCP+3	;doesn't go to CBBS
;
*	*	*	*	*	*	*

*		CONSOLE ROUTINES		*

*	*	*	*	*	*	*
;
;	EACH POSSIBLE MODEM (HAYES, IDS, PMMI)	*
;	HAS ITS OWN CARRIER DETECT (MCARDET),
;	STATUS (MSTAT), INPUT (MINPUT), AND	*
;	OUTPUT (MOUTPUT) ROUTINE.
;	STATUS AND INPUT BOTH RETURN 0FFH	*
;	UPON CARRIER LOSS
*	*	*	*	*	*	*

*	H A Y E S   M O D E M   I / O		*

*	*	*	*	*	*	*
;
	IF	HAYES
;
;	PORTS
;
DCHDAT	EQU	80H	;DATA PORT ADDRESS
DCHST	EQU	DCHDAT+1 ;STATUS PORT
DCHCP1	EQU	DCHST	;CONTROL PORT 1
DCHCP2	EQU	DCHST+1	;CONTROL PORT 2
;
;	BITS
;
DCHCD	EQU	40H	;CARRIER DETECT
DCHTRE	EQU	2	;TX REG EMPTY
DCHRRF	EQU	1	;RCV REG FILLED
;
*	*	*	*	*	*	*
;
;MODEM CARRIER DETECT ROUTINE FOR HAYES
;
MCARDET	IN	DCHST	;READ STAT
	CMA		;FLIP BIT
	ANI	DCHCD	;CARRIER DETECT
	RZ		;RETURN 0 IF OK
	MVI	A,0FFH	;RETURN 0FFH
	RET		;	IF CARRIER LOST
;
;MODEM STAT ROUTINE FOR HAYES
;
MSTAT	CALL	MCARDET	;CHECK CARRIER
	RNZ		;LOST, RETURN
	IN	DCHST	;GET MODEM STATUS
	ANI	DCHRRF	;RECEIVE FILLED?
	RZ		;0 = NONE
	MVI	A,0FFH	;0FFH = READY
	RET
;
;MODEM INPUT ROUTINE FOR HAYES
;
MINPUT	CALL	MSTAT	;GET STAT
	JZ	MINPUT	;	LOOP UNTIL READY
	CALL	MCARDET	;CARRIER LOST?
	RNZ		;	YES, RET 0FFH
	IN	DCHDAT	;GET DATA
	ANI	7FH
	RET		;WITH HAYES DATA
;
MOUTPUT	IN	DCHST	;READ STAT
	ANI	DCHTRE	;TX REG EMPTY?
	JZ	MOUTPUT	;..NO, WAIT
	MOV	A,C	;GET CHAR
	OUT	DCHDAT
	RET
;
	ENDIF		;HAYES
;
*	*	*	*	*	*	*

*	I D S   M O D E M   I / O		*

*	*	*	*	*	*	*
	IF	IDS
;
;	PORTS
;
IDSST	EQU	0C0H	;STATUS PORT
IDSDAT	EQU	IDSST+1	;DATA PORT ADDRESS
;
;	BITS
;
IDSCTS	EQU	40H	;CARRIER DETECT (CLEAR TO SEND)
IDSTRE	EQU	1	;TX REG EMPTY
IDSRRF	EQU	2	;RCV REG FILLED
;
*	*	*	*	*	*	*
;
;MODEM CARRIER DETECT ROUTINE FOR IDS
;
MCARDET	IN	IDSST	;READ STAT
	CMA		;FLIP
	ANI	IDSCTS	;CLEAR TO SEND?
	RZ		;RET 00 IF CARRIER
	MVI	A,0FFH	;RET 0FFH
	RET		;	IF CARRIER LOST
;
;MODEM STAT ROUTINE FOR IDS
;
MSTAT	CALL	MCARDET	;RETURN TRUE
	RNZ		;	IF NO CARRIER
	IN	IDSST	;GET MODEM STATUS
	ANI	IDSRRF	;RECEIVE FILLED?
	RZ		;	NO, RETURN 0
	MVI	A,0FFH	;YES,
	RET		;	RETURN 0FFH
;
;MODEM INPUT ROUTINE FOR IDS
;
MINPUT	CALL	MCARDET	;CARRIER?
	RNZ		;	NO, RET. 0FFH
	CALL	MSTAT	;GET STATUS
	JZ	MINPUT	;	LOOP UNTIL READY
	IN	IDSDAT	;GET DATA
	ANI	7FH	;KILL PARITY
 	RET
;
;
MOUTPUT	IN	IDSST	;READ STAT
	ANI	IDSTRE	;TX REG EMPTY?
	JZ	MOUTPUT	;..NO, WAIT
	MOV	A,C	;GET CHAR
	OUT	IDSDAT
	RET
;
	ENDIF		;IDS
;
*	*	*	*	*	*	*

*	P M M I   M O D E M   I / O		*

*	*	*	*	*	*	*
;
	IF	PMMI
;
;	PMMI MODEM BOARD EQUATES
;
PMMIB	EQU	0C0H	;BASE ADDRESS
;
PMMIUST	EQU	PMMIB	;UART STATUS PORT ADDRESS
;	INPUT BITS IN PMMIUST
PMMIDAV	EQU	2	;DATA AVAILABLE
PMMITBE	EQU	1	;XMIT BUFF EMPTY
;
PMMIDAT	EQU	PMMIB+1	;DATA PORT ADDRESS
PMMIMST	EQU	PMMIB+2	;MODEM STATUS PORT
;	INPUT BITS IN PMMIMST
PMMICTS	EQU	4	;(NOT) CTS (I.E. CARRIER)
PMMIOFF	EQU	10H	;OFF HOOK
;
*	*	*	*	*	*	*
;
;MODEM CARRIER DETECT ROUTINE FOR PMMI
;
MCARDET	IN	PMMIMST	;READ STAT
	ANI	PMMICTS	;CLEAR TO SEND?
	RZ		;RET 00 IF CARRIER
	MVI	A,0FFH	;RET 0FFH
	RET		;	IF CARRIER LOST
;
;MODEM STAT ROUTINE FOR PMMI
;
MSTAT	CALL	MCARDET	;RET 0FFH
	RNZ		;	IF NO CARRIER
	IN	PMMIUST	;GET STATUS
	ANI	PMMIDAV	;DATA AVAILABLE?
	RZ		;	NO, RETURN 0
	MVI	A,0FFH	;YES
	RET		;	RET 0FFH
;
;MODEM INPUT ROUTINE FOR PMMI
;
MINPUT	CALL	MCARDET	;CHECK CARRIER
	RNZ		;RET 0FFH IF NO CARRIER
	CALL	MSTAT	;GET STATUS
	JZ	MINPUT	;LOOP UNTIL READY
	IN	PMMIDAT	;GET DATA
	ANI	7FH	;STRIP PARITY
	RET
;
MOUTPUT	IN	PMMIUST
	ANI	PMMITBE	;XMIT BUFF EMPTY?
	JZ	MOUTPUT
	MOV	A,C
	OUT	PMMIDAT
	RET
;
	ENDIF		;PMMI
;
*	*	*	*	*	*	*

*		L O C A L   I / O		*

*	*	*	*	*	*	*
;
LCLSTAT	EQU	0	;STATUS PORT
LCLKB	EQU	1	;KEYBOARD STATUS BIT
LCLDATA	EQU	2	;KEYBOARD DATA PORT
;
*	*	*	*	*	*	*
;
;STAT ROUTINE FOR LOCAL KEYBOARD
;
KSTAT	IN	LCLSTAT	;GET STATUS
;	CMA		;CMA IF NOT "HIGH READY" <====
	ANI	LCLKB	;KEYBOARD READY?
	RZ		;	NO, RETURN 00
	MVI	A,0FFH	;YES
	RET		;	RET 0FFH
;
;INPUT ROUTINE FOR LOCAL KEYBOARD
;
KINPUT	CALL	KSTAT	;GET STATUS
	JZ	KINPUT	;LOOP UNTIL READY
	IN	LCLDATA	;GET DATA
	ANI	7FH	;STRIP PARITY
	RET
;
*	*	*	*	*	*	*
;
;-----> KEYBOARD STATUS ROUTINE
;
CONST	IN	SSW	;SEE IF
	ANI	REMOTE	;	MODEM
	JZ	KSTAT	;	NO, JUST KB.
	CALL	MSTAT	;GET MODEM STAT
	RNZ		;RET IF MODEM CHAR
	IN	SSW	;GET SW
	ANI	LCL	;ON = USE KB
	RZ		;NO KEY INPUT
	JMP	KSTAT	;GET LOCAL STAT
;
;----->	CONSOLE INPUT ROUTINE
;
CONIN	CALL	CONST	;GET STATUS
	JZ	CONIN	;LOOP UNTIL READY
	IN	SSW	;LOCAL KB?
	ANI	LCL
	JZ	KEYNK	;NO LOCAL
	CALL	KSTAT	;GET LOCAL STATUS
	JNZ	KINPUT	;GET KEY IF READY
;
KEYNK	IN	SSW	;GET SSW,
	ANI	REMOTE	;CHECK IF MODEM
	JZ	CONIN	;LOOP IF NO MODEM
	CALL	MSTAT	;CHECK MODEM
	JNZ	MINPUT	;GO IF MODEM
	JMP	CONIN
;
;----->	CONSOLE OUTPUT ROUTINE
;
;  O   O   O O O   O O O   O O O
;  OO  O   O   O     O     O
;  O O O   O   O     O     O O
;  O  OO   O   O     O     O
;  O   O   O O O     O     O O O   O O O
;
;...FOLLOWING JMP TO PROM SCROLL ROUTINE...
;
CONOUT	CALL	LOCLOUT	;TO PROM SCROLL RTN
;
;TEST FOR MODEM OUT
;
	IN	SSW
	ANI	REMOTE
	RZ		;NO REMOTE
;
	JMP	MOUTPUT	;SEND TO MODEM FROM (C)
;
;LOCAL OUTPUT ROUTINE - MUST BE FASTER THAN MODEM
;
LOCLOUT	IN	4
	ANI	1
	JZ	LOCLOUT
	MOV	A,C
	OUT	5
	RET
;
;END
